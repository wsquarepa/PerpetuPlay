services:
  redis:
    image: redis:latest
    container_name: redis
    networks:
      - perpetuplay-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 5s
      retries: 60
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped

  lavalink:
    image: fredboat/lavalink:4.0-alpine
    container_name: lavalink
    restart: unless-stopped
    environment:
      - _JAVA_OPTIONS=-Xmx6G
      - SERVER_PORT=2333
    volumes:
      - ./lavalink/application.yml:/opt/Lavalink/application.yml:ro
      - ./lavalink/music:/opt/Lavalink/music:ro
    expose:
      - 2333
    networks:
      - perpetuplay-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2333"]
      interval: 1s
      timeout: 5s
      retries: 60

  indexing:
    depends_on:
      redis:
        condition: service_healthy
    build: ./lavalink
    container_name: indexing
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./lavalink/music/:/opt/Lavalink/music/:ro
    networks:
      - perpetuplay-network
    restart: "no"

  bot:
    depends_on:
      indexing:
        condition: service_completed_successfully
      lavalink:
        condition: service_healthy
    build: ./bot
    container_name: bot
    environment:
      - DISCORD_BOT_TOKEN=${BOT_TOKEN}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CHANNEL_ID=${CHANNEL_ID}
      - WEB_DASHBOARD_BASE_URL=${WEB_DASHBOARD_BASE_URL}
    networks:
      - perpetuplay-network
    restart: unless-stopped

  backend:
    depends_on:
      indexing:
        condition: service_completed_successfully
    build: ./backend
    container_name: backend
    environment:
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_CLIENT_SECRET=${DISCORD_CLIENT_SECRET}
      - DISCORD_CALLBACK_URL=${DISCORD_CALLBACK_URL}
      - DISCORD_GUILD_ID=${DISCORD_GUILD_ID}
      - SESSION_SECRET=${SESSION_SECRET}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - perpetuplay-network
    expose:
      - 8080
    restart: unless-stopped

  frontend:
    build: ./frontend
    container_name: frontend
    volumes:
      - frontend-build:/app/dist
    networks:
      - perpetuplay-network

  nginx:
    image: nginx:latest
    container_name: nginx
    depends_on:
      - backend
      - frontend
    volumes:
      - frontend-build:/usr/share/nginx/html
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "${PORT}:80"
    networks:
      - perpetuplay-network
    restart: unless-stopped

networks:
  perpetuplay-network:
    driver: bridge

volumes:
  redis-data:
  frontend-build:
